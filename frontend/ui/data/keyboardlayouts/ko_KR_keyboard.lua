local logger = require("logger")

--------
-- # Korean 2-beolsik Keyboard layout
--------

local HgHelper = require("ui/data/keyboardlayouts/ko_KR_helper")

--------
-- UI handler implementation for communicating with text input box widget
--------
function HgHelper.UIHandler:put_char(char)
    HgHelper.UIHandler.inputbox:_addChars(char)
end
function HgHelper.UIHandler:del_char(char)
    HgHelper.UIHandler.inputbox:_delChar()
end
HgHelper.HgFSM:init(HgHelper.UIHandler)

--------
-- Custom key event handlers with Hangul support
--------
local wrapInputBox = function(inputbox)
    HgHelper.HgFSM.clean_state() -- reset helper

    if inputbox._wrapped == nil then
        inputbox._wrapped = true

        -- helper functions
        local copied_names = {}
        local function restore_func_references(obj)
            for __, name in ipairs(copied_names) do
                local orig_name = "_" .. name
                if obj[orig_name] then
                    obj[name] = obj[orig_name]
                    obj[orig_name] = nil
                end
            end
        end

        local function copy_func_reference(obj, name)
            obj["_" .. name] = obj[name]
            table.insert(copied_names, name)
        end

        -- override original implementations with helper object
        copy_func_reference(inputbox, "addChars")
        copy_func_reference(inputbox, "delChar")

        function inputbox:addChars(key)
            logger.dbg("ko_KR_kbd:addChar(", key, ")")
            HgHelper.UIHandler.inputbox = self
            HgHelper.HgFSM:process_char(key)
        end
        function inputbox:delChar()
            logger.dbg("ko_KR_kbd:delChar()")
            HgHelper.UIHandler.inputbox = self
            HgHelper.HgFSM:process_bsp()
        end

        -- override implementations: reset helper if we have to stop combining current syllable
        ---- helper function
        local function wrap_func_with_hghelper_reset(obj, name)
            copy_func_reference(obj, name)
            obj[name] = function(self)
                HgHelper.HgFSM.clean_state()
                self["_" .. name](self)
            end
        end

       ---- delete text
        wrap_func_with_hghelper_reset(inputbox, "delToStartOfLine")
        wrap_func_with_hghelper_reset(inputbox, "clear")

        ---- move cursor
        wrap_func_with_hghelper_reset(inputbox, "leftChar")
        wrap_func_with_hghelper_reset(inputbox, "rightChar")
        wrap_func_with_hghelper_reset(inputbox, "upLine")
        wrap_func_with_hghelper_reset(inputbox, "downLine")

        ---- unfocus: move to other inputbox
        wrap_func_with_hghelper_reset(inputbox, "unfocus")

        ---- tap/hold/swipe: move cursor
        ------ helper function
        local function wrap_touch_event_func_with_hghelper_reset(obj, name)
            copy_func_reference(obj, name)
            obj[name] = function(self, arg, ges)
                HgHelper.HgFSM.clean_state()
                return self["_" .. name](self, arg, ges)
            end
        end

        wrap_touch_event_func_with_hghelper_reset(inputbox, "onTapTextBox")
        wrap_touch_event_func_with_hghelper_reset(inputbox, "onHoldTextBox")
        wrap_touch_event_func_with_hghelper_reset(inputbox, "onSwipeTextBox")

        return function() -- return unwrap function
            restore_func_references(inputbox)
            inputbox._wrapped = nil
        end
    end
end

-- Belows are just same as the English keyboard popup
local en_popup = require("ui/data/keyboardlayouts/keypopup/en_popup")
local com = en_popup.com -- comma (,)
local prd = en_popup.prd -- period (.)
local _at = en_popup._at
local _eq = en_popup._eq -- equals sign (=)

return {
    min_layer = 1,
    max_layer = 4,
    shiftmode_keys = {["Ó¥µ"] = true},
    symbolmode_keys = {["Sym"] = true, ["ABC"] = true},
    utf8mode_keys = {["üåê"] = true},
    umlautmode_keys = {["√Ñ√©√ü"] = false},  -- Disabled 'umlaut' keys
    keys = {
        -- [shift, unshift, symbol-shift, symbol-unshift]
        -- first row
        {  --  1       2       3       4
            { "„ÖÉ",    "„ÖÇ",   "Ôø¶",    "0", },
            { "„Öâ",    "„Öà",    "!",    "1", },
            { "„Ñ∏",    "„Ñ∑",    _at,    "2", },
            { "„Ñ≤",    "„Ñ±",    "#",    "3", },
            { "„ÖÜ",    "„ÖÖ",    "+",    _eq, },
            { "„Öõ",    "„Öõ",    "‚òÜ",    "(", },
            { "„Öï",    "„Öï",    "‚òÖ",    ")", },
            { "„Öë",    "„Öë",    "‚ô°",   "\\", },
            { "„Öí",    "„Öê",    "‚ô•",    "/", },
            { "„Öñ",    "„Öî",    "‚Äª",    "`", },
        },
        -- second row
        {  --  1       2       3       4
            { "„ÖÅ",    "„ÖÅ",    "‚Ä¶",    "@", },
            { "„Ñ¥",    "„Ñ¥",    "$",    "4", },
            { "„Öá",    "„Öá",    "%",    "5", },
            { "„Ñπ",    "„Ñπ",    "^",    "6", },
            { "„Öé",    "„Öé",    ":",    "'", },
            { "„Öó",    "„Öó",    "‚ô©",   "\"", },
            { "„Öì",    "„Öì",    "‚ô™",    "[", },
            { "„Öè",    "„Öè",    "‚ô¨",    "]", },
            { "„Ö£",    "„Ö£",    "‚Ñ¢",    "-", },
        },
        -- third row
        {  --  1           2       3       4
            { label = "Ó¥µ",
              width = 1.5
            },
            { "„Öã",    "„Öã",    "„Äå",    "7", },
            { "„Öå",    "„Öå",    "„Äç",    "8", },
            { "„Öä",    "„Öä",    "*",    "9", },
            { "„Öç",    "„Öç",    "‚ù§",    com, },
            { "„Ö†",    "„Ö†",    "&",    prd, },
            { "„Öú",    "„Öú",    "„Äé",    "‚Üë", },
            { "„Ö°",    "„Ö°",    "„Äè",    "‚Üì", },
            { label = "Óù≠",
              width = 1.5,
              bold = false
            },
        },
        -- fourth row
        {
            { "Sym",  "Sym",  "ABC",  "ABC",
              width = 1.5},
            { label = "üåê",
              width = 2,
            },
            -- { "√Ñ√©√ü",  "√Ñ√©√ü",  "√Ñ√©√ü",  "√Ñ√©√ü",},
            { label = "Í∞ÑÍ≤©",
              " ",    " ",    " ",    " ",
              width = 3.0},
            { com,    com,    "‚Äú",    "‚Üê", },
            { prd,    prd,    "‚Äù",    "‚Üí", },
            { label = "‚Æ†",
              "\n",    "\n",   "\n",   "\n",
              width = 1.5,
              bold = true
            },
        },
    },

    -- wrap InputBox for hooking events to the helper
    wrapInputBox = wrapInputBox,
}
