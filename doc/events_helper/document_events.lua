--[[--
  Minimalistic lua file to detect documented and undocumented events and event handlers and document them
]]

local mode = arg[1] -- can be 0 (check) or 1 (document)
local in_file_name = arg[2] -- in filename

local MODE_CHECK = "0"
local MODE_DOCUMENTED = "1"
local MODE_ADD = "2"

-- check if correct usage
if not mode or not in_file_name then
    print("usage: lua document_events [0|1|2] file")
    print("       0 find undocumented; 1 find documented, 2 documented the undocumented")
    return
end

-- check if file exists
local in_file = io.open(in_file_name, "r")
if not in_file then
    print("Can not open " .. in_file_name)
    return
end
io.close(in_file)

-------------------------
-- helper functions
-------------------------
local header_line = "\n#################################\nfile: " .. in_file_name

local function hasTag(block, tag)
    local tag_found = false
    tag = tag .. " "
    for n = 1, #block do
        if block[n]:find(tag) then
            tag_found = true
        end
    end
    return tag_found
end

local function show(block, line_nb)
    if header_line then
        print(header_line .. " L#:" .. line_nb)
        header_line = nil
    end
    for n = 1, #block do
        print(block[n])
    end
end

local function processFile(in_file_name, out_file_name)
    local block = {}
    local line_nb = 0
    local out_file = io.open(out_file_name, "w")
	local doc_added = false
	local old_line = ""
    for line in io.lines(in_file_name) do
        line_nb = line_nb + 1
		-- only for initial comment
		if line_nb == 1 and mode == MODE_ADD then
			if not line:find("%-%-%-") and not line:find("%-%-%[%[") then
	            out_file:write("--- autogenerated\n")
			end
		end

        if line:find(" *[-][-][-]*.*") then
            table.insert(block, line)
        elseif line:find("^ *$") then
            block = {}
        elseif line:find("function .*.*:_?on.*%(") then
            if mode == MODE_DOCUMENTED then
                if hasTag(block, "@eventHandler") then
                    show(block, line_nb)
                    print(line)
                    print()
                end
            elseif mode == MODE_CHECK then
                if not hasTag(block, "@eventHandler") then
                    show(block, line_nb)
                    print(line)
                    print()
                end
            else
                if not hasTag(block, "@eventHandler") then
                    local i, j = line:find(":_?on[a-zA-Z0-9_]*")
                    line = line .. " --- @eventHandler " .. line:sub(i+1, j)
					doc_added = true
                end
            end
            block = {}
        elseif line:find("handleEvent") or line:find("broadcastEvent") then
            if mode == MODE_DOCUMENTED then
                if hasTag(block, "@event") then
                    show(block, line_nb)
                    print(line)
                    print()

                end
            elseif mode == MODE_CHECK then
                if not hasTag(block, "@event") then
                    show(block, line_nb)
                    print(line)
                    print()
                end
            else
                if not hasTag(block, "@event") then
                    local i, j = line:find("Event:new%( *\"[a-zA-Z0-9_]*\"")
                    if i and j then
                        i, j = line:find("\"[a-zA-Z0-9_]*\"")
                        line = line .. " --- @event " .. line:sub(i+1, j-1)
						doc_added = true
                    end
                end
            end
		elseif line:find("event *= *\"[A-Z]") then
			-- find events used by dispatcher (i.e. dispatcher:registerAction)
			local i, j = line:find("event *= *\"[A-Z][a-zA-Z-0-9]*\"")
			if i and j then
				local event_part = line:sub(i, j)
				i, j = event_part:find("\"[a-zA-Z0-9_]*\"")
				line = line .. " --- @event " .. event_part:sub(i+1, j-1)
				doc_added = true
			end
		elseif line:find("%.on[A-Z][a-zA-Z0-9_]* *[=]") then
			--- find "function.onXyz ="
			local i, j = line:find("%.on[A-Z][a-zA-Z0-9_]*")
			if i and j then
				line = line .. " --- @eventHandler " .. line:sub(i+1, j)
				doc_added = true
			end
		elseif line:find("self%.key_events%.[A-Z][a-zA-Z0-9_]*") then
			--- find "self.key_events.Abc"
			local i, j = line:find("self%.key_events%.[A-Z][a-zA-Z0-9_]*")
			if i and j then
				local event_part = line:sub(i, j)
				local i, j = event_part:find("%.[A-Z][a-zA-Z0-9_]*")
				line = line .. " --- @event " .. event_part:sub(i+1, j) .. "___key_event"
				doc_added = true
			end
        end
        if mode == MODE_ADD then
            out_file:write(line .. "\n")
        end
		old_line = line
    end -- for line
    out_file:close()
	return doc_added
end -- function processFile

-------------------------
------- do the job
-------------------------

if not in_file_name:find("_meta%.lua$") or true then
	local out_file_name = in_file_name .. ".annotate"
	if processFile(in_file_name, out_file_name) then
		os.execute(string.format("mv %s %s", out_file_name, in_file_name))
	else
		os.execute(string.format("rm %s", out_file_name))
	end
end
