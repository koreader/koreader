--[[--
    Minimalistic lua file to detect documented and undocumented
    events and event handlers and document them.
    v 0.2 --squish that later xxx
]]

local in_file_name = arg[1] -- in filename

-- check if correct usage
if not in_file_name then
    print("usage: lua document_events file")
    return
end

-- check if file exists
local in_file = io.open(in_file_name, "r")
if not in_file then
    print("Can not open " .. in_file_name)
    return
end
io.close(in_file)

-------------------------
-- helper functions
-------------------------

local function hasTag(block, tag)
    tag = tag .. " "
    for n = 1, #block do
        if block[n]:find(tag) then
            return true
        end
    end
    return false
end

local function hasEventOrHandler(block)
    for n = 1, #block do
        if block[n]:find("@event") then
            return true
        end
    end
    return false
end

local function processFile(in_file_name, out_file_name)
    local block = {}
    local out_file = io.open(out_file_name, "w")
    local get_next_line = io.lines(in_file_name)
    local line_nb = 0
    local doc_added = false
    local file_changed = false

    local function update_depths(line, initial)
        local _, nb_open = line:gsub("{","{")
        local _, nb_close = line:gsub("}","}")
        return initial + nb_open - nb_close
    end

    local function write_and_get_next_line(line)
        out_file:write(line .. "\n")
        return get_next_line()
    end

    local line = get_next_line()
    while line do
        doc_added = false
        line_nb = line_nb + 1
        -- only for initial comment
        if line_nb == 1 then
            if not line:find("%-%-%-") and not line:find("%-%-%[%[") then
                out_file:write("--- autogenerated\n")
            end
        end

        -- Skip a pure comment block.
        if line:find(" *%-%-%[%[") and not line:find(" *%-%-%[%[%-%-") then
            while line and not line:find("]]") do
                line = write_and_get_next_line(line)
            end
        end

        if line:find("^ *%-%-%-*.*") then
            table.insert(block, line)
        elseif line:find("^ *[a-zA-Z0-9_]*$") then
            block = {}
        elseif line:find("function .*:_?on.*%(") then
            -- find abcd:onAbc
            local i, j = line:find(":_?on[A-Z][a-zA-Z0-9_]*")
            local handler_name = line:sub(i+1, j)
            if #block > 0 and block[1]:find("%-%-%-") and not hasEventOrHandler(block) then
                line = write_and_get_next_line(line)
                line = line .. " --- @eventHandler " .. handler_name
                doc_added = true
            elseif not hasTag(block, "@eventHandler") then
                line = line .. " --- @eventHandler " .. handler_name
                doc_added = true
            end
        elseif line:find(":handleEvent") or line:find(":broadcastEvent") then
            -- find handleEvent and broadcastEvent
            if not hasTag(block, "@event") then
                local i, j = line:find("Event:new%( *\"[A-Z][a-zA-Z0-9_]*\"")
                if i and j then
                    i, j = line:find("\"[a-zA-Z0-9_]*\"")
                    line = line .. " --- @event " .. line:sub(i+1, j-1)
                    doc_added = true
                end
            end
        elseif line:find("event *= *\"[A-Z]") then
            -- find events used by dispatcher (i.e. dispatcher:registerAction)
            local i, j = line:find("event *= *\"[A-Z][a-zA-Z-0-9]*\"")
            if i and j then
                local event_part = line:sub(i, j)
                i, j = event_part:find("\"[A-Z][a-zA-Z0-9_]*\"")
                line = line .. " --- @event " .. event_part:sub(i+1, j-1)
                doc_added = true
            end
        elseif line:find("%.on[A-Z][a-zA-Z0-9_]* *[=]") then
            -- find "function.onXyz ="
            local i, j = line:find("%.on[A-Z][a-zA-Z0-9_]*")
            if i and j then
                line = line .. " --- @eventHandler " .. line:sub(i+1, j)
                doc_added = true
            end
        elseif line:find("self%.key_events%.[A-Z][a-zA-Z0-9_]*") then
            -- find "self.key_events.Abc"
            local i, j = line:find("self%.key_events%.[A-Z][a-zA-Z0-9_]*")
            i = i + #"self.key_events." -- no escape of "." here
            line = line .. " --- @event " .. line:sub(i, j) .. "___key_event"
            doc_added = true
        elseif line:find("self%.ges_events%.[A-Z][a-zA-Z0-9_]*") then
            -- find "self.ges_events.Abc"
            local i, j = line:find("self%.ges_events%.[A-Z][a-zA-Z0-9_]*")
            i = i + #"self.ges_events." -- no escape of "." here
            line = line .. " --- @event " .. line:sub(i, j) .. "___ges_event"
            doc_added = true
        elseif line:find("self%.key_events += *{ ?") then
            if line:find("self%.key_events += *{ *}") then
                -- nothing to do here
            elseif line:find("self%.key_events += *{ ") then
                -- find "self.key_event = { Abc = {},  ... }"
                print("xxxxxxxxxxx todo1", in_file_name)
                doc_added = true
            else
                -- find "self.key_event = {"
                --         Abc = ...
                line = write_and_get_next_line(line)
                local depths = 1
                while line do
                    if depths == 1 and line:find("^ *[A-Z][a-zA-Z0-9_]*") then
                        local i, j = line:find("[A-Z][a-zA-Z0-9_]*")
                        line = line .. " --- @event " .. line:sub(i, j) .. "___key_event"
                        doc_added = true
                    end
                    depths = update_depths(line,  depths)
                    line = write_and_get_next_line(line)
                    if depths == 0 then
                        break
                    end
                end
            end
        elseif line:find("self%.ges_events += *{ ?") then
            if line:find("self%.ges_events += *{ *}") then
                -- nothing to do here
            elseif line:find("self%.ges_events += *{ ") then
                -- find "self.ges_event = { Abc = {},  ... }"
                print("xxxxxxxxxxx todo2", in_file_name, line)
                doc_added = true
            else
                -- find "self.ges_event = {"
                --         Abc = ...
                line = write_and_get_next_line(line)
                local depths = 1
                while line do
                    if depths == 1 and line:find("^ *[A-Z][a-zA-Z0-9_]*") then
                        local i, j = line:find("[A-Z][a-zA-Z0-9_]*")
                        local event_part = line:sub(i, j)
                        line = line .. " --- @event " .. event_part .. "___ges_event"
                        doc_added = true
                    end
                    depths = update_depths(line, depths)
                    line = write_and_get_next_line(line)
                    if depths == 0 then
                        break
                    end
                end
            end
        end

        if doc_added then
            file_changed = true
            block = {}
        end

        if line then
            line = write_and_get_next_line(line)
        end
    end -- for line
    out_file:close()
    return file_changed
end -- function processFile

-------------------------
------- do the job
-------------------------

if not in_file_name:find("_meta%.lua$") or true then
    local out_file_name = in_file_name .. ".annotate"
    if processFile(in_file_name, out_file_name) then
        os.execute(string.format("mv %s %s", out_file_name, in_file_name))
    else
        os.execute(string.format("rm %s", out_file_name))
    end
end
